openapi: 3.0.3
info:
  title: Messenger
  description:
    This is messenger back end made for personal educational purposes. Learn more [on GitHub](https://github.com/barpav/messenger).
  version: 0.5.0
servers:
  - url: http://localhost/v1
tags:
  - name: users
    description: Managing users
    externalDocs:
      description: Source code
      url: https://github.com/barpav/msg-users
  - name: sessions
    description: User authentication and session management
    externalDocs:
      description: Source code
      url: https://github.com/barpav/msg-sessions
  - name: messages
    description: Messaging and sync. Learn more about syncing [on GitHub](https://github.com/barpav/msg-messages/blob/main/README.md).
    externalDocs:
      description: Source code
      url: https://github.com/barpav/msg-messages
  - name: files
    description: File sharing
    externalDocs:
      description: Source code
      url: https://github.com/barpav/msg-files
paths:
  /users:
    post:
        tags:
          - users
        summary: Register new user
        security: [] # No security
        requestBody:
          description: New user data.
          content:
            application/vnd.newUser.v1+json:
              schema:
                $ref: '#/components/schemas/newUser.v1'
          required: true
        responses:
          '201':
            description: New user successfully registered.
          '400':
            description: Incorrect parameters.
            content:
              text/plain; charset=utf-8:
                example: User id can contain only 'a-z', '0-9', '-' and '_' characters.
          '409':
            description: User id already exists.
          '500':
            $ref: '#components/responses/InternalServerError'
    get:
      tags:
        - users
      summary: Get user info
      security:
        - Session key: []
      parameters:
        - name: id
          in: query
          description: User identifier to get information about. If not specified, will return information about current user.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: User info successfully received.
          content:
            application/vnd.userInfo.v1+json:
              schema:
                $ref: '#/components/schemas/userInfo.v1'
        '401':
          $ref: '#components/responses/Unauthorized-Session'
        '404':
          description: User not found.
        '406':
          description: Requested media type is not supported ("Accept" header).
        '410':
          description: User deleted.
        '500':
          $ref: '#components/responses/InternalServerError'
    patch:
      tags:
        - users
      summary: Edit user profile
      security:
        - Session key: []
      requestBody:
        description: User profile data.
        content:
          application/vnd.userProfileCommon.v1+json:
            schema:
              $ref: '#/components/schemas/userProfileCommon.v1'
          application/vnd.userProfilePassword.v1+json:
            schema:
              $ref: '#/components/schemas/userProfilePassword.v1'
        required: true
      responses:
        '200':
          description: User profile successfully updated.
        '400':
          description: Invalid profile data.
          content:
            text/plain; charset=utf-8:
              example: User name must be between 1 and 150 characters.
        '401':
          $ref: '#components/responses/Unauthorized-Session'
        '500':
          $ref: '#components/responses/InternalServerError'
    delete:
      tags:
        - users
      summary: Permanently delete user
      security:
        - Credentials: []
      parameters:
        - name: confirmation-code
          in: query
          description: If not specified, a new confirmation code will be returned.
          required: false
          schema:
            type: string
      responses:
        '202':
          description: User deletion request accepted.
          headers:
            confirmation-code:
              description: In case of multiple calls, only the last generated code is valid.
              schema:
                type: string
        '204':
          description: User successfully deleted. This action cannot be undone.
        '401':
          $ref: '#components/responses/Unauthorized-Credentials'
        '417':
          description: Invalid confirmation code.
        '500':
          $ref: '#components/responses/InternalServerError'

  /sessions:
    post:
      tags:
        - sessions
      summary: Start new user session
      security:
        - Credentials: []
      responses:
        '201':
          description: New user session started.
          headers:
            session-id:
              description: Started session id.
              schema:
                type: integer
            session-key:
              description: Used for authentication in most operations. Should be kept safe.
              schema:
                type: string
        '401':
          $ref: '#components/responses/Unauthorized-Credentials'
        '429':
          description: Maximum number of sessions has been reached.
        '500':
          $ref: '#components/responses/InternalServerError'
    get:
      tags:
        - sessions
      summary: Get active user sessions
      security:
        - Credentials: []
      responses:
        '200':
          description: User sessions successfully received.
          content:
            application/vnd.userSessions.v1+json:
              schema:
                $ref: '#/components/schemas/userSessions.v1'
        '401':
          $ref: '#components/responses/Unauthorized-Credentials'
        '406':
          description: Requested media type is not supported ("Accept" header).
        '500':
          $ref: '#components/responses/InternalServerError'
    delete:
      tags:
        - sessions
      summary: End user sessions
      security:
        - Credentials: []
      parameters:
        - name: id
          in: query
          description: Session id to end. If not specified, all active user sessions will be ended.
          required: false
          schema:
            type: integer
      responses:
        '204':
          description: User session(s) successfully ended. Operation is idempotent.
        '401':
          $ref: '#components/responses/Unauthorized-Credentials'
        '500':
          $ref: '#components/responses/InternalServerError'

  /messages:
    post:
      tags:
        - messages
      summary: Send new message
      security:
          - Session key: []
      requestBody:
        description: Message data.
        content:
          application/vnd.newPersonalMessage.v1+json:
            schema:
              $ref: '#/components/schemas/newPersonalMessage.v1'
      responses:
          '201':
            description: Message sent
            headers:
              Location:
                description: New message relative location in format "/{id}"
                schema:
                  type: string
              ETag:
                $ref: '#components/headers/ETag-Timestamp'
          '400':
            description: Incorrect message data.
            content:
              text/plain; charset=utf-8:
                example: Message recipient not found.
          '401':
            $ref: '#components/responses/Unauthorized-Session'
          '500':
            $ref: '#components/responses/InternalServerError'
    get:
      tags:
        - messages
      summary: Sync messages
      security:
          - Session key: []
      parameters:
        - name: after
          in: query
          description: Timestamp of the last synced message.
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Maximum number of messages to return (min 1, max 100, default 50).
          required: false
          schema:
            type: integer
      responses:
          '200':
            description: Success
            content:
              application/vnd.messageUpdates.v1+json:
                schema:
                  $ref: '#/components/schemas/messageUpdates.v1'
          '400':
            description: Incorrect parameters.
            content:
              text/plain; charset=utf-8:
                example: "Invalid limit: min 1, max 100."
          '401':
            $ref: '#components/responses/Unauthorized-Session'
          '500':
            $ref: '#components/responses/InternalServerError'
  
  /messages/{id}:
    get:
      tags:
        - messages
      summary: Get message data
      security:
          - Session key: []
      parameters:
        - name: id
          in: path
          description: Message id to receive.
          required: true
          schema:
            type: integer
      responses:
          '200':
            description: Success. <br>
              Since message type depends on how it was originally created, in favor of forward compatibility, 'Accept' header, if specified, would be ignored
              (instead, client must check response 'Content-Type' header and handle/ignore specified message type accordingly).
            content:
              application/vnd.personalMessage.v1+json:
                schema:
                  $ref: '#/components/schemas/personalMessage.v1'
          '401':
            $ref: '#components/responses/Unauthorized-Session'
          '404':
            description: Message not found.
          '500':
            $ref: '#components/responses/InternalServerError'
    put:
      tags:
        - messages
      summary: Edit message
      security:
          - Session key: []
      requestBody:
        description: Message data.
        content:
          application/vnd.editedPersonalMessage.v1+json:
            schema:
              $ref: '#/components/schemas/editedPersonalMessage.v1'
      parameters:
        - name: id
          in: path
          description: Message id to edit.
          required: true
          schema:
            type: integer
        - $ref: '#components/parameters/If-Match-Timestamp'
      responses:
          '200':
            description: Message edited successfully.
            headers:
              ETag:
                $ref: '#components/headers/ETag-Timestamp'
          '400':
            description: Incorrect message data.
            content:
              text/plain; charset=utf-8:
                example: Message data violates 'editedPersonalMessage.v1' schema.
          '401':
            $ref: '#components/responses/Unauthorized-Session'
          '404':
            description: Message not found.
          '410':
            description: Message deleted.
          '412':
            $ref: '#components/responses/Timestamp-Not-Match'
          '500':
            $ref: '#components/responses/InternalServerError'
    patch:
      tags:
        - messages
      summary: Mark message as read
      security:
          - Session key: []
      parameters:
        - name: id
          in: path
          description: Read message id.
          required: true
          schema:
            type: integer
        - $ref: '#components/parameters/If-Match-Timestamp'
      responses:
          '200':
            description: Message successfully marked as read.
            headers:
              ETag:
                $ref: '#components/headers/ETag-Timestamp'
          '401':
            $ref: '#components/responses/Unauthorized-Session'
          '404':
            description: Message not found.
          '410':
            description: Message deleted.
          '412':
            $ref: '#components/responses/Timestamp-Not-Match'
          '500':
            $ref: '#components/responses/InternalServerError'
    delete:
      tags:
        - messages
      summary: Delete message data
      description: Since all messages, even "deleted" ones, must be synchronized among different users and their clients, messages cannot be deleted completely. <br>
        Instead they will be permanently modified to clear all sent content and mark messages as "deleted" to have the ability to sync such changes and actually delete data in users' clients.
      security:
          - Session key: []
      parameters:
        - name: id
          in: path
          description: Message id to delete data.
          required: true
          schema:
            type: integer
        - $ref: '#components/parameters/If-Match-Timestamp'
      responses:
          '200':
            description: Message data successfully deleted.
            headers:
              ETag:
                $ref: '#components/headers/ETag-Timestamp'
          '401':
            $ref: '#components/responses/Unauthorized-Session'
          '404':
            description: Message not found.
          '410':
            description: Message already deleted.
          '412':
            $ref: '#components/responses/Timestamp-Not-Match'
          '500':
            $ref: '#components/responses/InternalServerError'

  /files:
    post:
      tags:
        - files
      summary: Allocate new file and set share options
      security:
          - Session key: []
      requestBody:
        description: New file description
        content:
          application/vnd.newPrivateFile.v1+json:
            schema:
              $ref: '#/components/schemas/newPrivateFile.v1'
          application/vnd.newPublicFile.v1+json:
            schema:
              $ref: '#/components/schemas/newPublicFile.v1'
      responses:
          '201':
            description: New file allocated successfully. 
            headers:
              Location:
                description: New file relative location in format "/{id}"
                schema:
                  type: string
          '400':
            description: Incorrect file description.
            content:
              text/plain; charset=utf-8:
                example: File name must be specified.
          '401':
            $ref: '#components/responses/Unauthorized-Session'
          '500':
            $ref: '#components/responses/InternalServerError'

  /files/{id}:
    post:
      tags:
        - files
      summary: Upload new file content
      security:
          - Session key: []
      requestBody:
        description: File content in binary format.
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      parameters:
        - name: id
          in: path
          description: Allocated file id to upload its content.
          required: true
          schema:
            type: integer
      responses:
          '200':
            description: File content uploaded successfully.
          '401':
            $ref: '#components/responses/Unauthorized-Session'
          '404':
            description: Allocated file not found.
          '409':
            description: File content already uploaded.
          '413':
            description: File too large.
          '415':
            description: Unsupported media type.
          '500':
            $ref: '#components/responses/InternalServerError'
    get:
      tags:
        - files
      summary: Get file data
      security:
          - Session key: []
      parameters:
        - name: id
          in: path
          description: File id to receive data.
          required: true
          schema:
            type: integer
      responses:
          '200':
            description: File successfully received.
            content:
              "*/*":
                schema:
                  type: string
                  format: binary
                  description: File data in binary format.
            headers:
              Content-Type:
                description: File MIME type as it was specified on file allocation.
                schema:
                  type: string
              Content-Disposition:
                description: In format 'attachment; filename="name"' where "name" is the name of the file as it was specified on file allocation.
                schema:
                  type: string
              Content-Length:
                description: File size in bytes.
                schema:
                  type: integer
          '401':
            $ref: '#components/responses/Unauthorized-Session'
          '404':
            description: File not found.
          '500':
            $ref: '#components/responses/InternalServerError'
    head:
      tags:
        - files
      summary: Get file info
      description: Same as GET, but without actual file data.
      security:
          - Session key: []
      parameters:
        - name: id
          in: path
          description: File id to receive info.
          required: true
          schema:
            type: integer
      responses:
          '200':
            description: File info successfully received.
            headers:
              Content-Type:
                description: File MIME type as it was specified on file allocation.
                schema:
                  type: string
              Content-Disposition:
                description: In format 'attachment; filename="name"' where "name" is the name of the file as it was specified on file allocation.
                schema:
                  type: string
              Content-Length:
                description: File size in bytes.
                schema:
                  type: integer
          '401':
            $ref: '#components/responses/Unauthorized-Session'
          '404':
            description: File not found.
          '500':
            $ref: '#components/responses/InternalServerError'
    delete:
      tags:
        - files
      summary: Delete file
      security:
          - Session key: []
      parameters:
        - name: id
          in: path
          description: File id to delete.
          required: true
          schema:
            type: integer
      responses:
          '204':
            description: File successfully deleted.
          '401':
            $ref: '#components/responses/Unauthorized-Session'
          '404':
            description: File not found.
          '500':
            $ref: '#components/responses/InternalServerError'

components:

  securitySchemes:
    Credentials:
      type: http
      scheme: basic
      description: Used to manage sessions (start, read, end) and delete user.
    Session key:
      type: http
      scheme: bearer
      description: Used for most operations.

  responses:
    Unauthorized-Credentials:
      description: Credentials is missing or invalid.
    Unauthorized-Session:
      description: Session does not exist or session key is missing.
    InternalServerError:
      description: Server-side issue.
      headers:
        issue:
          description: Ticket that can be used for investigation.
          schema:
            type: string
    Timestamp-Not-Match:
      description: Client message timestamp is out of date (not match with If-Match).

  headers:
    ETag-Timestamp:
      description: Message new timestamp. <br>
        Should be used to avoid receiving message data when syncing from the same client that made the modification.
      schema:
        type: integer

  parameters:
    If-Match-Timestamp:
      name: If-Match
      in: header
      description: Modifying message timestamp that client have, which must match with current timestamp of the message in order to provide the operation.
      schema:
        type: integer
      required: true

  schemas:
    newUser.v1:
      type: object
      required:
        - id
        - name
        - password
      properties:
        id:
          type: string
          description: Unique user identifier. Cannot be changed after registration. Can contain only 'a-z', '0-9', '-' and '_' characters.
          example: jane
          minLength: 1
          maxLength: 50
        name:
          type: string
          example: Jane Doe
          minLength: 1
          maxLength: 150
        password:
          type: string
          description: Must contain at least one uppercase and lowercase letter and one digit.
          example: My1stGoodPassword
          minLength: 8
    userInfo.v1:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Jane Doe
          minLength: 1
          maxLength: 150
        picture:
          type: string
          description: TODO
          example: TODO
    userProfileCommon.v1:
      type: object
      properties:
        name:
          type: string
          example: Jane Doe
          minLength: 1
          maxLength: 150
        picture:
          type: string
          description: TODO
          example: TODO
    userProfilePassword.v1:
      type: object
      required:
        - current
        - new
      properties:
        current:
          type: string
          description: Current user password to change.
          example: My1stOlGoodPassword
          minLength: 8
        new:
          type: string
          description: New user password to set. Must contain at least one uppercase and lowercase letter and one digit.
          example: My2ndPrettyNewPassword
          minLength: 8
    userSessions.v1:
      type: object
      required:
        - active
      properties:
        active:
          type: integer
          description: Total number of active user sessions.
          example: 1
        list:
          type: array
          description: List of active user sessions.
          items:
            type: object
            required:
              - id
              - started
              - lastActivity
              - lastIp
              - lastAgent
            description: User session info.
            properties:
              id:
                type: integer
                description: Session id.
                example: 3
              started:
                type: string
                description: Session start time (ISO 8601, UTC).
                example: "2023-07-10T14:30:23Z"
              lastActivity:
                type: string
                description: Time of a last activity (ISO 8601, UTC).
                example: "2023-07-10T17:42:13Z"
              lastIp:
                type: string
                description: IP address of a last activity.
                example: "132.54.78.32"
              lastAgent:
                type: string
                description: User agent of a last activity.
                example: "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0"
    newPersonalMessage.v1:
      type: object
      required:
        - to
        - text
      properties:
        to:
          type: string
          description: Recipient user id.
          example: jane
        text:
          type: string
          description: Message text.
          example: "Hello!"
          minLength: 1
    messageUpdates.v1:
      type: object
      required:
        - total
      properties:
        total:
          type: integer
          description: Number of messages in the list.
          example: 1
        messages:
          type: array
          items:
            type: object
            required:
              - id
              - timestamp
            description: Messages sorted according to their timestamp in ascending order.
            properties:
              id:
                type: integer
                description: Message id.
                example: 235642
              timestamp:
                type: integer
                description: Message update (create, edit, delete, receive, read) timestamp.
                example: 7363
    personalMessage.v1:
      type: object
      required:
        - id
        - timestamp
      properties:
        id:
          type: integer
          description: Message id.
          example: 762523
        timestamp:
          type: integer
          description: Message update (create, edit, delete, receive, read) timestamp.
          example: 36218
        from:
          type: string
          description: Sender user id.
          example: jane
        to:
          type: string
          description: Recipient user id.
          example: john
        created:
          type: string
          description: Message creation time (ISO 8601, UTC).
          example: "2023-07-29T19:09:13Z"
        edited:
          type: boolean
          description: True if message has been edited.
        read:
          type: boolean
          description: True if message has been read.
        text:
          type: string
          description: Message text.
          example: "Hello! How's it going?"
        deleted:
          type: boolean
          description: Message deletion flag.
    editedPersonalMessage.v1:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: Edited message text.
          example: "Hello there!"
          minLength: 1
    newPrivateFile.v1:
      type: object
      description: Description of the file, that will be available only for specified users.
      required:
        - name
        - mime
        - access
      properties:
        name:
          type: string
          description: File name with extension (if any).
          example: "vacation.jpg"
          minLength: 1
        mime:
          type: string
          description: File MIME type.
          example: "image/jpeg"
          minLength: 1
        access:
          type: array
          description: Users (ids) who will have access to the file.
          items:
            type: string
            example: john
    newPublicFile.v1:
      type: object
      description: Description of the file, that will be available for any authenticated user.
      required:
        - name
        - mime
      properties:
        name:
          type: string
          description: File name with extension (if any).
          example: "profile.jpg"
          minLength: 1
        mime:
          type: string
          description: File MIME type.
          example: "image/jpeg"
          minLength: 1
